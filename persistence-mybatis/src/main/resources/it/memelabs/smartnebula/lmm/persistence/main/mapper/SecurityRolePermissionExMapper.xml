<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="it.memelabs.smartnebula.lmm.persistence.main.mapper.SecurityRolePermissionExMapper">

    <select id="selectByRoleId"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.SecurityRolePermissionKey"
            resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.SecurityRolePermissionMapper.BaseResultMap">
        select
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.SecurityRolePermissionMapper.Base_Column_List"/>
        from security_role_permission
        where role_id = #{roleId,jdbcType=BIGINT}
    </select>

    <select id="selectByUserLoginId" parameterType="long"
            resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.SecurityRolePermissionMapper.BaseResultMap">
        select
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.SecurityRolePermissionMapper.Alias_Column_List">
            <property name="tableAlias" value="SRP."/>
            <property name="fieldAlias" value=""/>
        </include>
        from user_login USR
        join user_login_security_role_assoc ASS on ASS.user_login_id=USR.id
        join security_role SR on SR.id=ASS.security_role_id
        join security_role_permission SRP on SRP.role_id =SR.id
        WHERE USR.id=#{userLoginId,jdbcType=BIGINT}
        <if test="nodeId != null">
            and ASS.node_id=#{nodeId,jdbcType=BIGINT}
        </if>
    </select>


    <insert id="batchInsert">
        insert into security_role_permission (role_id, entity_id, basic,
        read, write, delete, validate
        )
        values
        <foreach collection="roles" item="model" separator=",">
            (#{model.roleId,jdbcType=BIGINT}, #{model.entityId,jdbcType=VARCHAR}, #{model.basic,jdbcType=BIT},
            #{model.read,jdbcType=BIT}, #{model.write,jdbcType=BIT}, #{model.delete,jdbcType=BIT},
            #{model.validate,jdbcType=BIT}
            )
        </foreach>
    </insert>

</mapper>