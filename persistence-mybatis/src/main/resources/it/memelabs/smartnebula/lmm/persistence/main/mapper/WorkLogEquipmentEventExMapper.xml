<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventExMapper">
    <resultMap id="BaseResultMap" type="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventEx"
               extends="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.BaseResultMap">
        <association property="equipmentEmployment" columnPrefix="ee_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.EquipmentEmploymentExMapper.BaseResultMap"/>
        <association property="wbs" columnPrefix="wbs_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.WbsMapper.BaseResultMap"/>
        <association property="state" columnPrefix="st_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.EntityStateMapper.BaseResultMap"/>
        <association property="workLog" columnPrefix="work_log_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogExMapper.BaseResultMap"/>
    </resultMap>

    <resultMap id="ExportResultMap" type="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventExport"
               extends="BaseResultMap">
        <result column="ee_equipment_category_desc" jdbcType="VARCHAR" property="equipmentCategoryDescription"/>
        <result column="ee_equipment_type_desc" jdbcType="VARCHAR" property="equipmentTypeDescription"/>
    </resultMap>

    <sql id="Select_Joined_Column_List">
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.EquipmentEmploymentMapper.Alias_Column_List">
            <property name="tableAlias" value="ee."/>
            <property name="fieldAlias" value="ee_"/>
        </include>
        , es.description as ee_state_description
        , c.state_tag as ee_company_state_tag
        , ec.description as ee_equipment_category_desc
        , et.description as ee_equipment_type_desc
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.CompanyExMapper.Min_Alias_Column_List">
            <property name="tableAlias" value="c."/>
            <property name="fieldAlias" value="ee_company_"/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.EquipmentMapper.Alias_Column_List">
            <property name="tableAlias" value="e."/>
            <property name="fieldAlias" value="ee_equipment_"/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WbsExMapper.Min_Alias_Column_List">
            <property name="tableAlias" value="wbs."/>
            <property name="fieldAlias" value="wbs_"/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.EntityStateExMapper.Min_Alias_Column_List">
            <property name="tableAlias" value="st."/>
            <property name="fieldAlias" value="st_"/>
        </include>
        ,
        ev.state_id as st_id
    </sql>


    <sql id="Select_Joined_Tables">
        left join equipment_employment ee on ev.equipment_empl_id = ee.id
        left join entity_state es on ee.state_id=es.id
        left join company c on ee.company_id=c.id
        left join equipment e on ee.equipment_id=e.id
        left join entity_state st on ev.state_id=st.id
        left join wbs wbs on ev.wbs_id=wbs.id
        left join equipment_category ec on e.equipment_category_id=ec.id
        left join equipment_type et on e.equipment_type_id=et.id
    </sql>

    <!--show only changes. query need already a condition in WorkLogPersonEventExExample to function-->
    <sql id="notInWeeklyWorkLogId">
        <if test="notInWeeklyWorkLogId != null">
            and equipment_empl_id not in
            (select wwlp.equipment_empl_id from weekly_work_log_equipment wwlp WHERE wwlp.weekly_work_log_id =
            #{notInWeeklyWorkLogId,jdbcType=BIGINT})
        </if>
    </sql>

    <select id="selectExByExample"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventExExample"
            resultMap="BaseResultMap">
        select * from (
        select
        <if test="distinct">
            distinct
        </if>
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Alias_Column_List">
            <property name="tableAlias" value="ev."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="Select_Joined_Column_List"/>
        from work_log_equipment_event as ev
        <include refid="Select_Joined_Tables"/>
        ) t
        <if test="_parameter != null">
            <include
                    refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Example_Where_Clause"/>
            <include refid="notInWeeklyWorkLogId">
                <!--show only changes. query need already a condition in WorkLogPersonEventExExample to function-->
            </include>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="countExByExample"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventExExample"
            resultType="java.lang.Integer">
        select count(1) from (
        select
        <if test="distinct">
            distinct
        </if>
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Alias_Column_List">
            <property name="tableAlias" value="ev."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="Select_Joined_Column_List"/>
        from work_log_equipment_event as ev
        <include refid="Select_Joined_Tables"/>
        ) t
        <if test="_parameter != null">
            <include
                    refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Example_Where_Clause"/>
            <include refid="notInWeeklyWorkLogId">
                <!--show only changes. query need already a condition in WorkLogPersonEventExExample to function-->
            </include>
        </if>
    </select>

    <select id="selectExByPrimaryKey"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventKey"
            resultMap="BaseResultMap">
        select
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Alias_Column_List">
            <property name="tableAlias" value="ev."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="Select_Joined_Column_List"/>
        from work_log_equipment_event as ev
        <include refid="Select_Joined_Tables"/>
        where ev.id = #{id,jdbcType=BIGINT}
    </select>

    <update id="update" parameterType="it.memelabs.smartnebula.lmm.persistence.main.dao.WorkLogEventUpdateFilter">
        UPDATE work_log_equipment_event
        <set>
            <if test="wbsId != null">
                wbs_id = #{wbsId,jdbcType=BIGINT},
            </if>
            <if test="wbsIdNull">
                wbs_id = null,
            </if>
            <if test="stateId != null">
                state_id = #{stateId,jdbcType=BIGINT},
            </if>
            <if test="destinationWorkLogId != null">
                work_log_id = #{destinationWorkLogId,jdbcType=BIGINT},
            </if>
            <if test="stateTag != null">
                state_tag = #{stateTag,jdbcType=VARCHAR,typeHandler=org.apache.ibatis.type.EnumTypeHandler},
            </if>
        </set>
        <where>
            work_log_id = #{workLogId,jdbcType=BIGINT} AND
            id in
            <foreach item="item" index="index" collection="events"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </update>

    <select id="countNotValid" resultType="java.lang.Integer">
        select count (1)
        from work_log_equipment_event EV
        join equipment_employment PE on EV.equipment_empl_id=PE.id
        join company C on PE.company_id=C.id
        <where>
            (
            <![CDATA[C.state_tag <>'AUTHORIZED' ]]>
            OR <![CDATA[PE.state_tag<>'AUTHORIZED' ]]>
            OR <![CDATA[ PE.start_date > to_date(EV.event_timestamp::text, 'YYYY-MM-DD') ]]>
            OR <![CDATA[ PE.end_date < to_date(EV.event_timestamp::text, 'YYYY-MM-DD') ]]>
            )
            AND
            EV.work_log_id = #{workLogId,jdbcType=BIGINT}
            AND
            EV.id in
            <foreach item="item" index="index" collection="events"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="countDuplicate" resultType="java.lang.Integer">
        select count (1)
        from work_log_equipment_event SRC, work_log_equipment_event DEST
        <where>
            SRC.equipment_empl_id = DEST.equipment_empl_id
            and SRC.event_timestamp = DEST.event_timestamp
            and SRC.work_log_id = #{srcWorkLogId,jdbcType=BIGINT}
            and DEST.work_log_id=#{destWorkLogId,jdbcType=BIGINT}
            and SRC.id in
            <foreach item="item" index="index" collection="events"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="selectEquipmentEmploymentIds" resultType="java.lang.Long">
        select DISTINCT EV.equipment_empl_id
        from work_log_equipment_event EV
        <where>
            EV.work_log_id = #{workLogId,jdbcType=BIGINT}
            and EV.state_tag='VALIDATED'
        </where>
    </select>

    <sql id="Select_Joined_WorkLog_Column_List">
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogMapper.Alias_Column_List">
            <property name="tableAlias" value="WL."/>
            <property name="fieldAlias" value="work_log_"/>
        </include>
        ,
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.ConstructionSiteExMapper.Min_Alias_Column_List">
            <property name="tableAlias" value="CS."/>
            <property name="fieldAlias" value="work_log_construction_site_"/>
        </include>
    </sql>


    <select id="findForExportByFilter"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.WorkLogEquipmentEventExample"
            resultMap="ExportResultMap">
        select * from (
        select
        <if test="distinct">
            distinct
        </if>
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Alias_Column_List">
            <property name="tableAlias" value="ev."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="Select_Joined_Column_List"/>
        ,
        <include refid="Select_Joined_WorkLog_Column_List"/>
        from work_log_equipment_event as ev
        <include refid="Select_Joined_Tables"/>
        JOIN work_log as WL ON ev.work_log_id = WL.id
        left JOIN construction_site as CS ON WL.construction_site_id = cs.id
        ) t
        <if test="_parameter != null">
            <include
                    refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.WorkLogEquipmentEventMapper.Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
</mapper>