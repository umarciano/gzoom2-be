<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
        namespace="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonExMapper">

    <resultMap id="BaseResultMap"
               type="it.memelabs.smartnebula.lmm.persistence.main.dto.PersonEx"
               extends="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.BaseResultMap">
        <result column="pe_state_description" jdbcType="VARCHAR" property="peStateDescription"/>
        <result column="pe_state_tag" jdbcType="VARCHAR" property="peStateTag"/>
        <result column="comp_business_name" jdbcType="VARCHAR"
                property="compDescription"/>
        <result column="secondment_company_business_name" jdbcType="VARCHAR"
                property="secondmentCompanyDescription"/>
        <result column="pe_badge_number" jdbcType="VARCHAR" property="peBadgeNumber"/>
        <result column="pe_card_number" jdbcType="BIGINT" property="peCardNumber"/>
        <result column="pe_dismissal_date" jdbcType="DATE" property="dismissalDate"/>
        <result column="pe_assumption_date" jdbcType="DATE" property="assumptionDate"/>
        <result column="pe_start_date" jdbcType="DATE" property="startDate"/>
        <result column="pe_end_date" jdbcType="DATE" property="endDate"/>
        <result column="pe_job_description" jdbcType="VARCHAR" property="jobDescription"/>
        <result column="pe_level" jdbcType="VARCHAR" property="level"/>

        <result column="company_state_description" jdbcType="VARCHAR" property="companyStateDescription"/>
        <result column="company_state_tag" jdbcType="VARCHAR" property="companyStateTag"/>

        <!--<association property="address" fetchType="lazy" column="address_id"
                     select="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.selectByPrimaryKey"/>-->
        <association property="address" javaType="it.memelabs.smartnebula.lmm.persistence.main.dto.PostalAddressEx"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.BaseResultMap"
                     columnPrefix="addr_">
        </association>

        <!--<association property="birthLocation" fetchType="lazy" column="birth_location_id"
                     select="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.selectByPrimaryKey"/>-->
        <association property="birthLocation"
                     javaType="it.memelabs.smartnebula.lmm.persistence.main.dto.PostalAddressEx"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.BaseResultMap"
                     columnPrefix="bloc_">
        </association>


        <association property="role" columnPrefix="role_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.IdentifiableMapper.BaseResultMap"/>
        <association property="job" columnPrefix="pjob_"
                     resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.IdentifiableMapper.BaseResultMap"/>

    </resultMap>

    <sql id="Min_Alias_Column_List">
    ${tableAlias}first_name AS ${fieldAlias}first_name,
    ${tableAlias}last_name AS ${fieldAlias}last_name,
    ${tableAlias}tax_identification_number AS
    ${fieldAlias}tax_identification_number
  </sql>

    <sql id="Example_Where_Clause">
        <trim prefix="WHERE" prefixOverrides="and |or ">
            <trim prefix="and (" suffix=")" prefixOverrides="WHERE">
                <include
                        refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.Example_Where_Clause"/>
                <if test="filterText != null">
                    and (
                    lower(last_name) like lower(#{filterText})
                    or
                    lower(first_name) like lower(#{filterText})
                    )
                </if>
                <if test="filterCompanyId != null">
                    and pe_company_id=#{filterCompanyId}
                </if>
                <if test="filterPeStatusId != null">
                    and pe_state_id=#{filterPeStatusId}
                </if>
                <if test="filterTimeCardNumber != null">
                    and pe_card_number=#{filterTimeCardNumber}
                </if>
                <if test="filterBadgeNumber != null">
                    and lower(pe_badge_number) like lower(#{filterBadgeNumber})
                </if>
                <if test="filterSecondments!=null and filterSecondments == true">
                    and pe_destination_company_id is not null
                </if>
                <if test="filterSecondments!=null and filterSecondments == false">
                    and pe_destination_company_id is null
                </if>
                <if test="filterCompanyStatusId != null">
                    and company_state_id=#{filterCompanyStatusId}
                </if>
            </trim>
        </trim>
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long"
            resultMap="BaseResultMap">
        select
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.Alias_Column_List">
            <property name="tableAlias" value="p."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.Alias_Column_List">
            <property name="tableAlias" value="addr."/>
            <property name="fieldAlias" value="addr_"/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.Alias_Column_List">
            <property name="tableAlias" value="bloc."/>
            <property name="fieldAlias" value="bloc_"/>
        </include>
        from person p
        left join postal_address_view addr on p.address_id = addr.id
        left join postal_address_view bloc on p.birth_location_id = bloc.id
        where p.id = #{id,jdbcType=BIGINT}
    </select>

    <select id="countByExample"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.PersonExExample"
            resultType="java.lang.Integer">
        select count(*) from (
        select
        <if test="distinct">
            distinct
        </if>
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.Alias_Column_List">
            <property name="tableAlias" value="p."/>
            <property name="fieldAlias" value=""/>
        </include>
        <if test="_parameter != null">
            <if test="filterCompanyId != null or filterPeStatusId != null or (filterType != null and filterType == 'persons') or filterCompanyStatusId != null">
                ,
                <include
                        refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonEmploymentMapper.Alias_Column_List">
                    <property name="tableAlias" value="pe."/>
                    <property name="fieldAlias" value="pe_"/>
                </include>
            </if>
            <if test="filterType != null and filterType == 'persons'">
                , pe_state.description AS pe_state_description, pe.state_tag AS pe_state_tag, pe_state.id AS es_id
                , c.business_name AS comp_business_name , c.id AS comp_id
                , cs.business_name AS secondment_company_business_name
                , pr.description as role_description
                , pj.id as pjob_id
                , pj.description as pjob_description
                , c.state_id as company_state_id
                , company_state.description as company_state_description
                , company_state.tag as company_state_tag
            </if>
        </if>
        from person p
        <if test="_parameter != null">
            <if test="filterCompanyId != null or filterPeStatusId != null or (filterType != null and filterType == 'persons') or filterCompanyStatusId != null">
                left join person_employment pe on pe.person_id=p.id
                left join person_job pj on pj.id=pe.job_id
                left join person_role pr on pr.id=pe.role_id
            </if>
            <if test="(filterType != null and filterType == 'persons') or filterCompanyStatusId != null">
                left join entity_state pe_state on pe_state.id=pe.state_id
                left join company c on c.id=pe.company_id
                left join company cs on cs.id=pe.destination_company_id
                LEFT JOIN entity_state company_state on company_state.id = c.state_id
            </if>
        </if>
        )t
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <select id="selectByExampleWithRowbounds" resultMap="BaseResultMap"
            parameterType="it.memelabs.smartnebula.lmm.persistence.main.dto.PersonExExample">
        select * from (
        select
        <if test="distinct">
            distinct
        </if>
        <include
                refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.Alias_Column_List">
            <property name="tableAlias" value="p."/>
            <property name="fieldAlias" value=""/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.Alias_Column_List">
            <property name="tableAlias" value="addr."/>
            <property name="fieldAlias" value="addr_"/>
        </include>
        ,
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PostalAddressExMapper.Alias_Column_List">
            <property name="tableAlias" value="bloc."/>
            <property name="fieldAlias" value="bloc_"/>
        </include>
        <if test="_parameter != null">
            <if test="filterCompanyId != null or filterPeStatusId != null or (filterType != null and filterType == 'persons')">
                ,
                <include
                        refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonEmploymentMapper.Alias_Column_List">
                    <property name="tableAlias" value="pe."/>
                    <property name="fieldAlias" value="pe_"/>
                </include>
            </if>
            <if test="filterType != null and filterType == 'persons'">
                , pe_state.description AS pe_state_description, pe_state.tag AS es_state_tag, pe_state.id AS es_id
                , c.business_name AS comp_business_name , c.id AS comp_id
                , cs.business_name AS secondment_company_business_name
                , pr.description as role_description
                , pj.id as pjob_id
                , pj.description as pjob_description
                , c.state_id as company_state_id
                , company_state.description as company_state_description
                , company_state.tag as company_state_tag
            </if>
        </if>
        from person p
        left join postal_address_view addr on p.address_id = addr.id
        left join postal_address_view bloc on p.birth_location_id = bloc.id
        <if test="_parameter != null">
            <if
                    test="filterCompanyId != null or filterPeStatusId != null or (filterType != null and filterType == 'persons') or filterCompanyStatusId != null">
                left join person_employment pe on pe.person_id=p.id
                left join person_job pj on pj.id=pe.job_id
                left join person_role pr on pr.id=pe.role_id
            </if>
            <if test="(filterType != null and filterType == 'persons') or filterCompanyStatusId != null">
                left join entity_state pe_state on pe_state.id=pe.state_id
                left join company c on c.id=pe.company_id
                left join company cs on cs.id=pe.destination_company_id
                LEFT JOIN entity_state company_state on company_state.id = c.state_id
            </if>
        </if>
        ) t
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>


    <select id="selectByWorkLogIdWithRowbounds"
            resultMap="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.BaseResultMap">
        select
        distinct
        <include refid="it.memelabs.smartnebula.lmm.persistence.main.mapper.PersonMapper.Alias_Column_List">
            <property name="tableAlias" value="p."/>
            <property name="fieldAlias" value=""/>
        </include>
        from work_log_person_event ev
        join person_employment pe on ev.person_empl_id = pe.id
        join person p on pe.person_id=p.id
        <where>
            <if test="filterText != null">
                and (
                lower(p.last_name) like lower(#{filterText})
                or
                lower(p.first_name) like lower(#{filterText})
                )
            </if>
            <if test="workLogId != null">
                and ev.work_log_id = #{workLogId}
            </if>
        </where>
        order by p.last_name, p.first_name
    </select>

    <select id="countByWorkLogId" resultType="java.lang.Integer">
        select COUNT (DISTINCT p.id)
        from work_log_person_event ev
        join person_employment pe on ev.person_empl_id = pe.id
        join person p on pe.person_id=p.id
        <where>
            <if test="filterText != null">
                and (
                lower(p.last_name) like lower(#{filterText})
                or
                lower(p.first_name) like lower(#{filterText})
                )
            </if>
            <if test="workLogId != null">
                and ev.work_log_id = #{workLogId}
            </if>
        </where>
    </select>

</mapper>
